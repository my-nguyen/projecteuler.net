# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
#
def print_array numbers
  numbers.each_index do |i|
    print " #{numbers[i]}"
    puts if ((i+1) % 10 == 0 && i != (numbers.size-1))
  end
  puts
end

def find_divisors(number)
  if number == 1
    divisors = [1]
  else
    divisors = [1]
    i = 2
    sqrt = Math.sqrt(number).to_i
    while (i <= sqrt)
      if (number % i == 0)
        divisors << i
        divisors << number/i if (i != number/i)
      end
      i += 1
    end
    (divisors << number).sort!
  end
end

triangles = [1]
natural = 2
while natural <= 100
  triangles << triangles[natural-2] + natural
  natural += 1
end
print_array triangles

triangles.each do |triangle|
  divisors = find_divisors(triangle)
  puts("triangle: #{triangle}, divisors:")
  print_array divisors
end
